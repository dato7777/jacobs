{"ast":null,"code":"var _jsxFileName = \"/Users/dato/My Python Stuff/lastdayproject2/Jacobs-Dreams/Front/my-app/src/app/pages/checkout/ConfirmAddress.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport Paper from '@mui/material/Paper';\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport StepLabel from '@mui/material/StepLabel';\nimport Button from '@mui/material/Button';\nimport Link from '@mui/material/Link';\nimport Typography from '@mui/material/Typography';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport { addUserDetailAsync } from './CheckoutSilce';\nimport { useSelector, useDispatch } from 'react-redux';\nimport jwt_decode from \"jwt-decode\";\nimport { selectLogged } from '../LoginSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst steps = ['Shipping address', 'Payment details', 'Review your order'];\nconst theme = createTheme();\n\nconst ConfirmAddress = () => {\n  _s();\n\n  const [activeStep, setActiveStep] = React.useState(0);\n  const dispatch = useDispatch();\n\n  const handleNext = () => {\n    setActiveStep(activeStep + 1);\n  };\n\n  const logged = useSelector(selectLogged);\n\n  const handleBack = () => {\n    setActiveStep(activeStep - 1);\n  }; // states of user details to be inputted \n\n\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [userAddress, setUserAddress] = useState(\"\");\n  const [userCity, setUserCity] = useState(\"\");\n  const [userPhone, setUserPhone] = useState(\"\");\n  const [birthDate, setBirthDate] = useState(\"\");\n  const [userZipCode, setUserZipCode] = useState(\"\"); // function that tests if inputted value is text \n\n  const isLetters = str => /^[A-Za-z]*$/.test(str); // function that tests if inputted value is number \n\n\n  const isNumbers = str => /^[0-9]*$/.test(str);\n\n  const firstNameOnInputChange = e => {\n    const {\n      value\n    } = e.target;\n\n    if (isLetters(value)) {\n      setFirstName(value);\n    }\n  };\n\n  const lastNameOnInputChange = e => {\n    const {\n      value\n    } = e.target;\n\n    if (isLetters(value)) {\n      setLastName(value);\n    }\n  };\n\n  const cityOnInputChange = e => {\n    const {\n      value\n    } = e.target;\n\n    if (isLetters(value)) {\n      setUserCity(value);\n    }\n  };\n\n  const zipOnInputChange = e => {\n    const {\n      value\n    } = e.target;\n\n    if (isNumbers(value)) {\n      setUserZipCode(value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AppBar, {\n        position: \"absolute\",\n        color: \"default\",\n        elevation: 0,\n        sx: {\n          position: 'relative'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        component: \"main\",\n        maxWidth: \"sm\",\n        sx: {\n          mb: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          variant: \"outlined\",\n          sx: {\n            my: {\n              xs: 3,\n              md: 6\n            },\n            p: {\n              xs: 2,\n              md: 3\n            }\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            component: \"h1\",\n            variant: \"h4\",\n            align: \"center\",\n            children: \"Checkout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Stepper, {\n            activeStep: activeStep,\n            sx: {\n              pt: 3,\n              pb: 5\n            },\n            children: steps.map(label => /*#__PURE__*/_jsxDEV(Step, {\n              children: /*#__PURE__*/_jsxDEV(StepLabel, {\n                children: label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 37\n              }, this)\n            }, label, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                gutterBottom: true,\n                children: \"Shipping address\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  container: true,\n                  spacing: 3,\n                  autoComplete: \"off\",\n                  children: [/*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      id: \"firstName\",\n                      name: \"firstName\",\n                      value: firstName,\n                      label: \"First name\",\n                      onChange: firstNameOnInputChange,\n                      fullWidth: true,\n                      autoComplete: \"given-name\",\n                      variant: \"standard\",\n                      type: \"text\",\n                      inputProps: {\n                        minLength: 2\n                      },\n                      required: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 113,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 112,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      required: true,\n                      id: \"lastName\",\n                      name: \"lastName\",\n                      value: lastName,\n                      label: \"Last name\",\n                      onChange: lastNameOnInputChange,\n                      fullWidth: true,\n                      autoComplete: \"family-name\",\n                      variant: \"standard\",\n                      inputProps: {\n                        minLength: 2\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 129,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 128,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      required: true,\n                      id: \"address1\",\n                      name: \"address1\",\n                      value: userAddress,\n                      label: \"Address line \",\n                      onChange: e => setUserAddress(e.target.value),\n                      fullWidth: true,\n                      autoComplete: \"shipping address-line1\",\n                      variant: \"standard\",\n                      type: \"text\",\n                      inputProps: {\n                        minLength: 5\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 143,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 142,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      required: true,\n                      id: \"city\",\n                      name: \"city\",\n                      value: userCity,\n                      label: \"City\",\n                      onChange: cityOnInputChange,\n                      fullWidth: true,\n                      autoComplete: \"shipping address-level2\",\n                      variant: \"standard\",\n                      type: \"text\",\n                      inputProps: {\n                        minLength: 2\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 159,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 158,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      id: \"phone\",\n                      name: \"phone\",\n                      value: userPhone,\n                      label: \"Contact phone\",\n                      onChange: e => setUserPhone(e.target.value),\n                      fullWidth: true,\n                      placeholder: \"05X-XXX-XX-XX\",\n                      variant: \"standard\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 174,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 173,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      required: true,\n                      id: \"zip\",\n                      name: \"zip\",\n                      value: userZipCode,\n                      label: \"Zip / Postal code\",\n                      onChange: zipOnInputChange,\n                      fullWidth: true,\n                      autoComplete: \"shipping postal-code\",\n                      variant: \"standard\",\n                      inputProps: {\n                        minLength: 7,\n                        maxLength: 7\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 186,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 185,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      required: true,\n                      id: \"birthdate\",\n                      name: \"birthdate\",\n                      value: birthDate // placeholder=\"DD/MM/YY\"\n                      ,\n                      type: \"date\",\n                      label: \"Birthday\",\n                      onChange: e => setBirthDate(e.target.value),\n                      fullWidth: true // autoComplete=\"birth date\"\n                      ,\n                      variant: \"standard\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 200,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 199,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    display: 'flex',\n                    justifyContent: 'flex-end'\n                  },\n                  children: [activeStep !== 0 && /*#__PURE__*/_jsxDEV(Button, {\n                    onClick: handleBack,\n                    sx: {\n                      mt: 3,\n                      ml: 1\n                    },\n                    children: \"Back\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 218,\n                    columnNumber: 45\n                  }, this), firstName.length > 1 & lastName.length > 1 & userAddress.length > 4 & userCity.length > 1 & userZipCode.length > 6 & birthDate.length > 5 ? logged === true ? /*#__PURE__*/_jsxDEV(Link, {\n                    href: \"/paymentform\",\n                    children: [\" \", /*#__PURE__*/_jsxDEV(Button, {\n                      variant: \"contained\" //    then we go to the next page, while adding the inputted values from previous page:\n                      ,\n                      onClick: id => dispatch(addUserDetailAsync({\n                        token: localStorage.getItem('token'),\n                        userID: jwt_decode(localStorage.getItem('token')).user_id,\n                        userBirth: birthDate,\n                        uCity: userCity,\n                        uStreetNumber: userAddress,\n                        uMobilePhone: userPhone,\n                        uZipCode: userZipCode,\n                        uFirstName: firstName,\n                        uLastName: lastName\n                      }), handleNext()),\n                      sx: {\n                        mt: 3,\n                        ml: 1\n                      },\n                      children: \"NEXT\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 225,\n                      columnNumber: 88\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 225,\n                    columnNumber: 60\n                  }, this) :\n                  /*#__PURE__*/\n                  // if user is not logged in, then i redirect him to the login page\n                  _jsxDEV(Link, {\n                    href: \"/login\",\n                    children: [\" \", /*#__PURE__*/_jsxDEV(Button, {\n                      variant: \"contained\" // onClick=\"#\"\n                      ,\n                      sx: {\n                        mt: 3,\n                        ml: 1\n                      } // type='submit'\n                      ,\n                      children: \"NEXT\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 247,\n                      columnNumber: 67\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 247,\n                    columnNumber: 45\n                  }, this) :\n                  /*#__PURE__*/\n                  // if user is logged in BUT the inputted data is not valid, then he stays on same page\n                  // until he enters the valid data \n                  _jsxDEV(Link, {\n                    href: \"/confirmaddress\",\n                    children: [\" \", /*#__PURE__*/_jsxDEV(Button, {\n                      variant: \"contained\" // onClick=\"#\"\n                      ,\n                      sx: {\n                        mt: 3,\n                        ml: 1\n                      },\n                      type: \"submit\",\n                      children: \"NEXT\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 258,\n                      columnNumber: 76\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 258,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ConfirmAddress, \"OKOXW83E/fwuc9N43nUXOJkRc7c=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ConfirmAddress;\nexport default ConfirmAddress;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfirmAddress\");","map":{"version":3,"names":["React","useState","CssBaseline","AppBar","Box","Container","Paper","Stepper","Step","StepLabel","Button","Link","Typography","createTheme","ThemeProvider","Grid","TextField","addUserDetailAsync","useSelector","useDispatch","jwt_decode","selectLogged","steps","theme","ConfirmAddress","activeStep","setActiveStep","dispatch","handleNext","logged","handleBack","firstName","setFirstName","lastName","setLastName","userAddress","setUserAddress","userCity","setUserCity","userPhone","setUserPhone","birthDate","setBirthDate","userZipCode","setUserZipCode","isLetters","str","test","isNumbers","firstNameOnInputChange","e","value","target","lastNameOnInputChange","cityOnInputChange","zipOnInputChange","position","mb","my","xs","md","p","pt","pb","map","label","minLength","maxLength","display","justifyContent","mt","ml","length","id","token","localStorage","getItem","userID","user_id","userBirth","uCity","uStreetNumber","uMobilePhone","uZipCode","uFirstName","uLastName"],"sources":["/Users/dato/My Python Stuff/lastdayproject2/Jacobs-Dreams/Front/my-app/src/app/pages/checkout/ConfirmAddress.js"],"sourcesContent":["import React, { useState } from 'react'\nimport CssBaseline from '@mui/material/CssBaseline';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport Paper from '@mui/material/Paper';\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport StepLabel from '@mui/material/StepLabel';\nimport Button from '@mui/material/Button';\nimport Link from '@mui/material/Link';\nimport Typography from '@mui/material/Typography';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport {addUserDetailAsync} from './CheckoutSilce'\nimport { useSelector, useDispatch } from 'react-redux';\nimport jwt_decode from \"jwt-decode\";\nimport {selectLogged} from '../LoginSlice'\n\nconst steps = ['Shipping address', 'Payment details', 'Review your order'];\n\nconst theme = createTheme();\nconst ConfirmAddress = () => {\n    \n    const [activeStep, setActiveStep] = React.useState(0);\n    const dispatch = useDispatch();\n    const handleNext = () => {\n        setActiveStep(activeStep + 1);\n    };\n    const logged=useSelector(selectLogged)\n    const handleBack = () => {\n        setActiveStep(activeStep - 1);\n    };\n                // states of user details to be inputted \n    const [firstName, setFirstName] = useState(\"\")\n    const [lastName, setLastName] = useState(\"\")\n    const [userAddress, setUserAddress] = useState(\"\")\n    const [userCity, setUserCity] = useState(\"\")\n    const [userPhone, setUserPhone] = useState(\"\")\n    const [birthDate, setBirthDate] = useState(\"\")\n    const [userZipCode, setUserZipCode] = useState(\"\")\n    // function that tests if inputted value is text \n    const isLetters = (str) => /^[A-Za-z]*$/.test(str);\n    // function that tests if inputted value is number \n    const isNumbers = (str) => /^[0-9]*$/.test(str);\n\n    const firstNameOnInputChange = (e) => {\n        const { value } = e.target;\n        if (isLetters(value)) {\n            setFirstName(value);\n        }\n    };\n\n    const lastNameOnInputChange = (e) => {\n        const { value } = e.target;\n        if (isLetters(value)) {\n            setLastName(value);\n        }\n    };\n    const cityOnInputChange = (e) => {\n        const { value } = e.target;\n        if (isLetters(value)) {\n            setUserCity(value);\n        }\n    };\n    const zipOnInputChange = (e) => {\n        const { value } = e.target;\n        if (isNumbers(value)) {\n            setUserZipCode(value);\n        }\n    };\n    return (\n        <div>\n            <ThemeProvider theme={theme}>\n                <CssBaseline />\n                <AppBar\n                    position=\"absolute\"\n                    color=\"default\"\n                    elevation={0}\n                    sx={{\n                        position: 'relative',\n\n                    }}\n                >\n                </AppBar>\n                <Container component=\"main\" maxWidth=\"sm\" sx={{ mb: 4 }}>\n                    <Paper variant=\"outlined\" sx={{ my: { xs: 3, md: 6 }, p: { xs: 2, md: 3 } }}>\n                        <Typography component=\"h1\" variant=\"h4\" align=\"center\">\n                            Checkout\n                        </Typography>\n                        <Stepper activeStep={activeStep} sx={{ pt: 3, pb: 5 }}>\n\n                            {steps.map((label) => (\n                                <Step key={label}>\n                                    <StepLabel>{label}</StepLabel>\n                                </Step>\n                            ))}\n\n                        </Stepper>\n                        <React.Fragment>\n                            <React.Fragment>\n                                <Typography variant=\"h6\" gutterBottom>\n                                    Shipping address\n                                </Typography>\n                                {/* I am using the HTML form, which has built in validation and \n                                mixing it with react ,to avoid writing everything from scratch, \n                                the \"onChange\" key below ensures the inputted text is in format that I need  */}\n                                <form >\n                                    <Grid container spacing={3}\n                                        autoComplete=\"off\">\n                                        <Grid item xs={12} sm={6}>\n                                            <TextField\n                                                id=\"firstName\"\n                                                name=\"firstName\"\n                                                value={firstName}\n                                                label=\"First name\"\n                                                onChange={firstNameOnInputChange}\n                                                fullWidth\n                                                autoComplete=\"given-name\"\n                                                variant=\"standard\"\n                                                type=\"text\"\n                                                inputProps={{ minLength: 2 }}\n                                                required\n                                            />\n\n                                        </Grid>\n                                        <Grid item xs={12} sm={6}>\n                                            <TextField\n                                                required\n                                                id=\"lastName\"\n                                                name=\"lastName\"\n                                                value={lastName}\n                                                label=\"Last name\"\n                                                onChange={lastNameOnInputChange}\n                                                fullWidth\n                                                autoComplete=\"family-name\"\n                                                variant=\"standard\"\n                                                inputProps={{ minLength: 2 }}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={12}>\n                                            <TextField\n                                                required\n                                                id=\"address1\"\n                                                name=\"address1\"\n                                                value={userAddress}\n                                                label=\"Address line \"\n                                                onChange={(e) => setUserAddress(e.target.value)}\n                                                fullWidth\n                                                autoComplete=\"shipping address-line1\"\n                                                variant=\"standard\"\n                                                type=\"text\"\n                                                inputProps={{ minLength: 5 }}\n                                            />\n                                        </Grid>\n\n                                        <Grid item xs={12} sm={6}>\n                                            <TextField\n                                                required\n                                                id=\"city\"\n                                                name=\"city\"\n                                                value={userCity}\n                                                label=\"City\"\n                                                onChange={cityOnInputChange}\n                                                fullWidth\n                                                autoComplete=\"shipping address-level2\"\n                                                variant=\"standard\"\n                                                type=\"text\"\n                                                inputProps={{ minLength: 2 }}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={12} sm={6}>\n                                            <TextField\n                                                id=\"phone\"\n                                                name=\"phone\"\n                                                value={userPhone}\n                                                label=\"Contact phone\"\n                                                onChange={(e) => setUserPhone(e.target.value)}\n                                                fullWidth\n                                                placeholder=\"05X-XXX-XX-XX\"\n                                                variant=\"standard\"\n                                            />\n                                        </Grid>\n                                        <Grid item xs={12} sm={6}>\n                                            <TextField\n                                                required\n                                                id=\"zip\"\n                                                name=\"zip\"\n                                                value={userZipCode}\n                                                label=\"Zip / Postal code\"\n                                                onChange={zipOnInputChange}\n                                                fullWidth\n                                                autoComplete=\"shipping postal-code\"\n                                                variant=\"standard\"\n                                                inputProps={{ minLength: 7, maxLength: 7 }}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={12} sm={6}>\n                                            <TextField\n                                                required\n                                                id=\"birthdate\"\n                                                name=\"birthdate\"\n                                                value={birthDate}\n                                                // placeholder=\"DD/MM/YY\"\n                                                type=\"date\"\n                                                label=\"Birthday\"\n                                                onChange={(e) => setBirthDate(e.target.value)}\n                                                fullWidth\n                                                // autoComplete=\"birth date\"\n                                                variant=\"standard\"\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                    \n                                    <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n                                        {activeStep !== 0 && (\n                                            <Button onClick={handleBack} sx={{ mt: 3, ml: 1 }}>\n                                                Back\n                                            </Button>\n                                        )}\n\n                                         {/* if all fields are valid within my requirements, AND user is logged in,  then... */}\n                                        {firstName.length > 1 & lastName.length > 1 & userAddress.length > 4 & userCity.length > 1 & userZipCode.length > 6 & birthDate.length > 5 ?\n                                            logged===true ?<Link href=\"/paymentform\" > <Button\n                                                variant=\"contained\"\n                                        //    then we go to the next page, while adding the inputted values from previous page:\n                                                onClick={(id) => dispatch(\n                                                    addUserDetailAsync({\n                                                        token: localStorage.getItem('token'),\n                                                        userID:jwt_decode(localStorage.getItem('token')).user_id,\n                                                        userBirth: birthDate,\n                                                        uCity: userCity,\n                                                        uStreetNumber: userAddress,\n                                                        uMobilePhone: userPhone,\n                                                        uZipCode: userZipCode,\n                                                        uFirstName: firstName,\n                                                        uLastName: lastName,\n\n                                                    }), handleNext())}\n                                                sx={{ mt: 3, ml: 1 }}\n                                            >\n                                                NEXT\n                                                \n                                            </Button></Link> :\n                                            // if user is not logged in, then i redirect him to the login page\n                                            <Link href=\"/login\" > <Button\n                                                variant=\"contained\"\n                                                // onClick=\"#\"\n                                                sx={{ mt: 3, ml: 1 }}\n                                                // type='submit'\n                                            >\n                                                NEXT\n\n                                            </Button></Link> :\n                                            // if user is logged in BUT the inputted data is not valid, then he stays on same page\n                                            // until he enters the valid data \n                                            <Link href=\"/confirmaddress\" > <Button\n                                                variant=\"contained\"\n                                                // onClick=\"#\"\n                                                sx={{ mt: 3, ml: 1 }}\n                                                type='submit'\n                                            >\n                                                NEXT\n                                            </Button></Link> }\n                                    </Box>\n                                </form>\n                            </React.Fragment>\n                        </React.Fragment>\n                    </Paper>\n                </Container>\n            </ThemeProvider>\n        </div>\n    )\n}\n\nexport default ConfirmAddress"],"mappings":"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"},"metadata":{},"sourceType":"module"}