{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { addOrder, getOrders, getOrderDetails } from './OrderAPI ';\nimport jwt_decode from \"jwt-decode\"; // import { addProductAsync, selectProducts, getProductsAsync } from './ProductsSlice'\n\nimport { useSelector, useDispatch } from 'react-redux'; // state-data (initial data)\n\nconst initialState = {\n  myorders: [],\n  myOrderDetails: [],\n  localStorageInit: []\n}; // const token = localStorage.getItem('token')\n// const userID = jwt_decode(localStorage.getItem('token')).user_id\n\nlet myCartItems = JSON.parse(localStorage.getItem('cartItems')); // let cartProdIds = myCartItems.map(e => e.Product_ID)\n// const orderTotal = JSON.parse(localStorage.getItem('totaltopay'))\n// const subtotal = JSON.parse(localStorage.getItem('sum'))\n// const discount = JSON.parse(localStorage.getItem('discount'))\n\nexport const addOrderAsync = createAsyncThunk('orders/addOrder', async data => {\n  const response = await addOrder(data.token, data.myCartItems, data.subtotal, data.discount, data.orderTotal);\n  return response.data;\n});\nexport const getOrdersAsync = createAsyncThunk('orders/getOrders', async data => {\n  const response = await getOrders(data.token);\n  return response.data;\n});\nexport const getOrderDetailsAsync = createAsyncThunk('orders/getOrderDetails', async data => {\n  const response = await getOrderDetails(data.token);\n  return response.data;\n});\nexport const OrderSlice = createSlice({\n  name: 'orders',\n  initialState,\n  reducers: {\n    clearCart: () => {\n      localStorage.setItem(\"cartItems\", JSON.stringify([])); // console.log(myCartItems)\n    },\n    pushToOrders: state => {}\n  },\n  // happens when async is done - callback\n  // async (3)\n  extraReducers: builder => {\n    builder.addCase(addOrderAsync.fulfilled, (state, action) => {}).addCase(getOrdersAsync.fulfilled, (state, action) => {\n      state.myorders = action.payload;\n    }).addCase(getOrderDetailsAsync.fulfilled, (state, action) => {\n      state.myOrderDetails = action.payload;\n    });\n  }\n}); // export of sync methods only\n\nexport const {\n  clearCart\n} = OrderSlice.actions; // export const { signOut } = ProductSlice.actions;\n// export of any part of the state\n\nexport const selectorders = state => state.orders.myorders;\nexport const selectorderdetails = state => state.orders.myOrderDetails;\nexport default OrderSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","addOrder","getOrders","getOrderDetails","jwt_decode","useSelector","useDispatch","initialState","myorders","myOrderDetails","localStorageInit","myCartItems","JSON","parse","localStorage","getItem","addOrderAsync","data","response","token","subtotal","discount","orderTotal","getOrdersAsync","getOrderDetailsAsync","OrderSlice","name","reducers","clearCart","setItem","stringify","pushToOrders","state","extraReducers","builder","addCase","fulfilled","action","payload","actions","selectorders","orders","selectorderdetails","reducer"],"sources":["/Users/dato/My Python Stuff/lastdayproject2/Jacobs-Dreams/Front/my-app/src/app/pages/orders/OrderSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { addOrder,getOrders,getOrderDetails} from './OrderAPI ';\nimport jwt_decode from \"jwt-decode\";\n// import { addProductAsync, selectProducts, getProductsAsync } from './ProductsSlice'\nimport { useSelector, useDispatch } from 'react-redux';\n\n// state-data (initial data)\nconst initialState = {\n  myorders: [],\n  myOrderDetails: [],\n  localStorageInit:[]\n};\n// const token = localStorage.getItem('token')\n// const userID = jwt_decode(localStorage.getItem('token')).user_id\nlet myCartItems = JSON.parse(localStorage.getItem('cartItems'))  \n// let cartProdIds = myCartItems.map(e => e.Product_ID)\n// const orderTotal = JSON.parse(localStorage.getItem('totaltopay'))\n// const subtotal = JSON.parse(localStorage.getItem('sum'))\n// const discount = JSON.parse(localStorage.getItem('discount'))\n\nexport const addOrderAsync = createAsyncThunk(\n  'orders/addOrder',\n  async (data) => {\n    const response = await addOrder(\n      data.token, data.myCartItems, data.subtotal, data.discount, data.orderTotal);\n    return response.data;\n  }\n);\n\nexport const getOrdersAsync = createAsyncThunk(\n  'orders/getOrders',\n  async (data) => {\n    const response = await getOrders(data.token);\n    \n    return response.data;\n  }\n);\nexport const getOrderDetailsAsync = createAsyncThunk(\n  'orders/getOrderDetails',\n  async (data) => {\n    const response = await getOrderDetails(data.token);\n    \n    return response.data;\n  }\n);\n\nexport const OrderSlice = createSlice({\n  name: 'orders',\n  initialState,\n  reducers: {\n    clearCart: () => {\n      localStorage.setItem(\"cartItems\", JSON.stringify([]))\n      // console.log(myCartItems)\n    },\n    pushToOrders: (state) => {\n    },\n\n  },\n  // happens when async is done - callback\n  // async (3)\n  extraReducers: (builder) => {\n    builder\n    .addCase(addOrderAsync.fulfilled, (state, action) => {\n    })\n    .addCase(getOrdersAsync.fulfilled, (state, action) => {\n      state.myorders=action.payload\n    })\n    .addCase(getOrderDetailsAsync.fulfilled, (state, action) => {\n      state.myOrderDetails=action.payload\n    });\n\n  },\n});\n// export of sync methods only\nexport const { clearCart } = OrderSlice.actions;\n// export const { signOut } = ProductSlice.actions;\n// export of any part of the state\n\n\nexport const selectorders = (state) => state.orders.myorders;\nexport const selectorderdetails = (state) => state.orders.myOrderDetails;\n\nexport default OrderSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,QAAT,EAAkBC,SAAlB,EAA4BC,eAA5B,QAAkD,aAAlD;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CACA;;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CAEA;;AACA,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,EADS;EAEnBC,cAAc,EAAE,EAFG;EAGnBC,gBAAgB,EAAC;AAHE,CAArB,C,CAKA;AACA;;AACA,IAAIC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAAlB,C,CACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,aAAa,GAAGjB,gBAAgB,CAC3C,iBAD2C,EAE3C,MAAOkB,IAAP,IAAgB;EACd,MAAMC,QAAQ,GAAG,MAAMjB,QAAQ,CAC7BgB,IAAI,CAACE,KADwB,EACjBF,IAAI,CAACN,WADY,EACCM,IAAI,CAACG,QADN,EACgBH,IAAI,CAACI,QADrB,EAC+BJ,IAAI,CAACK,UADpC,CAA/B;EAEA,OAAOJ,QAAQ,CAACD,IAAhB;AACD,CAN0C,CAAtC;AASP,OAAO,MAAMM,cAAc,GAAGxB,gBAAgB,CAC5C,kBAD4C,EAE5C,MAAOkB,IAAP,IAAgB;EACd,MAAMC,QAAQ,GAAG,MAAMhB,SAAS,CAACe,IAAI,CAACE,KAAN,CAAhC;EAEA,OAAOD,QAAQ,CAACD,IAAhB;AACD,CAN2C,CAAvC;AAQP,OAAO,MAAMO,oBAAoB,GAAGzB,gBAAgB,CAClD,wBADkD,EAElD,MAAOkB,IAAP,IAAgB;EACd,MAAMC,QAAQ,GAAG,MAAMf,eAAe,CAACc,IAAI,CAACE,KAAN,CAAtC;EAEA,OAAOD,QAAQ,CAACD,IAAhB;AACD,CANiD,CAA7C;AASP,OAAO,MAAMQ,UAAU,GAAGzB,WAAW,CAAC;EACpC0B,IAAI,EAAE,QAD8B;EAEpCnB,YAFoC;EAGpCoB,QAAQ,EAAE;IACRC,SAAS,EAAE,MAAM;MACfd,YAAY,CAACe,OAAb,CAAqB,WAArB,EAAkCjB,IAAI,CAACkB,SAAL,CAAe,EAAf,CAAlC,EADe,CAEf;IACD,CAJO;IAKRC,YAAY,EAAGC,KAAD,IAAW,CACxB;EANO,CAH0B;EAYpC;EACA;EACAC,aAAa,EAAGC,OAAD,IAAa;IAC1BA,OAAO,CACNC,OADD,CACSnB,aAAa,CAACoB,SADvB,EACkC,CAACJ,KAAD,EAAQK,MAAR,KAAmB,CACpD,CAFD,EAGCF,OAHD,CAGSZ,cAAc,CAACa,SAHxB,EAGmC,CAACJ,KAAD,EAAQK,MAAR,KAAmB;MACpDL,KAAK,CAACxB,QAAN,GAAe6B,MAAM,CAACC,OAAtB;IACD,CALD,EAMCH,OAND,CAMSX,oBAAoB,CAACY,SAN9B,EAMyC,CAACJ,KAAD,EAAQK,MAAR,KAAmB;MAC1DL,KAAK,CAACvB,cAAN,GAAqB4B,MAAM,CAACC,OAA5B;IACD,CARD;EAUD;AAzBmC,CAAD,CAA9B,C,CA2BP;;AACA,OAAO,MAAM;EAAEV;AAAF,IAAgBH,UAAU,CAACc,OAAjC,C,CACP;AACA;;AAGA,OAAO,MAAMC,YAAY,GAAIR,KAAD,IAAWA,KAAK,CAACS,MAAN,CAAajC,QAA7C;AACP,OAAO,MAAMkC,kBAAkB,GAAIV,KAAD,IAAWA,KAAK,CAACS,MAAN,CAAahC,cAAnD;AAEP,eAAegB,UAAU,CAACkB,OAA1B"},"metadata":{},"sourceType":"module"}